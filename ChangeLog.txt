--------------------------------------------------------------------------------------------------------------------------------------------
TAG v01-01-00
--------------------------------------------------------------------------------------------------------------------------------------------
Efficiency improvements addressing hotspots identified by extensive algorithm profiling. Frequently use kd-trees to avoid expensive calculations.

--------------------------------------------------------------------------------------------------------------------------------------------
TAG v01-00-00
--------------------------------------------------------------------------------------------------------------------------------------------
Milestone v01 release.
Update to reflect recent changes to PandoraSDK.
Improved const-correctness. Algorithms are now only exposed to pointers to const managed-objects. Access to managed-object non-const functionality is now only via Pandora APIs.
Added concrete implementation of LArTransformationPlugin; hard-coded detector height no longer required.
Moved wire pitch from LArTransformationPlugin to LArPseudoLayerPlugin.
Generalised 'GetExtremalCoordinatesXZ(...)' method so that it works in both 2D and 3D, and rename it 'GetExtremalCoordinates(...)'.
Added a 3D sliding linear fit, made up of two 2D sliding linear fits.
Upgraded pointing clusters to work in 3D as well as 2D.
Added configurable parameters to reject input hits based on cell length scales.
Added methods for relating hits to MC particles.
Added CheatingClusterCharacterisation algorithm.
Added CheatingVertexCreation algorithm.
Added CosmicRayBuilding algorithm.
Added NeutrinoVertexCreation algorithm.
Added ParticleAnalysis algorithm.
Added ProximityBasedMerging algorithm.
Added TrackRecovery algorithm.
Added VertexBasedPfoMerging algorithm.
Added track/shower discrimination; clusters flagged as tracks do not, by default, contribute to the shower tensor or feature in mop-up algorithms.
Improved version of ConeBasedMerging algorithm, using shower edge fits to create and extrapolate a shower area in each view.
Added candidate vertex creation and selection framework.
Introduced beam-mode vertex selection, reliably reduces input list of candidate vertices down to just two or three possibilities, for further investigation.
Restructured shower-growing, splitting into two algorithms and using vertex, if available, to make shower-growing decisions.
Quietened routine print statements.
Tuning and improved exception handling.
Address issues highlighted by coverity.
Makefile and CMakeLists overhaul.

--------------------------------------------------------------------------------------------------------------------------------------------
TAG v00-06
--------------------------------------------------------------------------------------------------------------------------------------------
Update to reflect recent changes to PandoraSDK.
Overhaul, with emphasis on ensuring that client applications can instantiate and use multiple concurrent pandora instances.
Address issues highlighted by Coverity.
Improved member variable initialization, with a default constructor for each algorithm.
Improved construction of TwoDSlidingFitResults so that they cannot exist in an uninitialized state.
Improved exception handling.
Make use of improved monitoring functionality.
Add to lar_content namespace.
Address rare exceptions (floating point precision, hits outside detector, etc.) identified from long cosmic validation runs.
Remove calo hits with zero transverse width or zero input pulse height.

--------------------------------------------------------------------------------------------------------------------------------------------
Tag v00-05-pre.
--------------------------------------------------------------------------------------------------------------------------------------------
Extensive development work - see svn log for details.

--------------------------------------------------------------------------------------------------------------------------------------------
Tag v00-04-pre.
--------------------------------------------------------------------------------------------------------------------------------------------
Extensive development work - see svn log for details.

--------------------------------------------------------------------------------------------------------------------------------------------
Tag v00-03-pre.
--------------------------------------------------------------------------------------------------------------------------------------------
Extensive development work - see svn log for details.

--------------------------------------------------------------------------------------------------------------------------------------------
Tag v00-02-pre.
--------------------------------------------------------------------------------------------------------------------------------------------
Extensive development work - see svn log for details.

--------------------------------------------------------------------------------------------------------------------------------------------
Tag v00-00-pre.
--------------------------------------------------------------------------------------------------------------------------------------------
Created pandora LAr Content library, containing algorithms, algorithm tools, plugins and helper classes for reconstructing events in liquid argon tpcs.

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
GENERAL INFO:
Pandora consists of the PandoraSDK (Software Development Kit), which comprises a single library and header files with flexible APIs.
There is also an optional PandoraMonitoring library, which contains event display and tree/histogram-writing functionality.
The PandoraMonitoring library depends on the PandoraSDK and ROOT.
Pandora algorithms will necessarily depend upon the PandoraSDK (and also PandoraMonitoring, if desired).
The algorithms can be built as part of a Pandora client application, such as MarlinPandora, or the standalone TestPandora binary.
Algorithms declared to be suitably generic may be designed for use by multiple client applications.
Such re-usable algorithms are best bundled together into a Pandora "content" library.
Algorithms are always registered via the client application, using the PandoraAPIs, but the client app can link against as many content libraries as required.
--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
